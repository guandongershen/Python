## 1、Python起步

### 1.1输入输出

- 新手在需要显示信息或得到用户输入时，容易使用print和raw_input内建函数。建议函数应该保持其清晰性，也就是它只应该接受参数，返回结果。从用户那里得到需要的数据，然后调用函数处理，从函数得到返回值，然后显示结果给用户。这样有程序的复用而不必担心自定义输出问题。这个规则的一个例外是，如果函数的基本功能就是为了得到用户的输出，或者就是为了输出信息，这时在函数体使用print或raw_input也未尝不可。
- 将函数分为两大类，一类只做事，不需要返回值（比如与用户交互或设置变量的值），另一类则执行一些运算，最后返回结果。如果输出就是函数的目的，那么在函数体内使用print语句也是可以接受的。

### 1.2注释

- Python注释

  ```
  # 单行注释
  三引号 块注释
  三引号可以是三个成对单引号或者双引号
  ```

### 1.3运算符

- Python运算符

  ```
  算数运算符
  + - * / // % **
  几乎所有的标准数据类型都支持+运算符，不管是数值相加还是序列合并
  
  比较运算符
  <	<=	>	>=	==	!=	<>(后续淘汰)
  
  逻辑运算符
  and	or	not
  使用逻辑运算符可以将任意表达式连接在一起，并得到一个布尔值
  ```

### 1.4变量和赋值

- 变量名是字母开头的标识符--所谓字母开头--意指大写或小写字母，另外还包括下划线。其他字符可以是数字，字母，或下划线。
- Python变量名大小写敏感。
- Python是动态类型语言，不需要事先声明变量的类型。变量的类型和值在赋值那一刻被初始化。

### 1.5数字

- Python中支持五中基本数字类型，其中三种是整数类型。

  int	long	bool	float	complex（复数）

  Python中长整数与C语言的长整数不同，Python长整数仅受限于用户计算机的虚拟内存总数。

- bool值是特殊的整数。

- 后续版本长整型与整形逐步统一为整数整型。

### 1.6字符串

- Python中字符串被定义为引号之间的字符集合。Python支持使用成对的单引号或双引号，三引号可以用来包含特殊的字符
- 加号用于字符串连接运算，星号则用于字符串重复。

### 1.7列表和元组

- 可以将列表和元组当成普通的“数组”，它能保存任意数量任意类型的Python对象。和数组一样，通过从0开始的数字索引访问元素，但是列表和元组可以存储不同类型的对象。
- 列表和元组的重要区别
  1. 列表元素用中括号包裹，元素个数及元素的值可以改变；
  2. 元组元素用小括号包裹，不可以更改。

- 元组可以看成是只读的列表。
- 通过切片运算（[ ]和[ : ]）可以得到子集，这一点与字符串的使用方法一样。

### 1.8字典

- 字典是Python中的映射数据类型。几乎所有类型的Python对象都可以用作键，不过一般还是以数字或者字符串最为常用。
- 值可以是任意类型的Python对象，字典元素用大括号包裹。

### 1.9代码块及缩进对齐

- Python中代码块通过缩进对其表达代码逻辑而不是使用大括号。

### 1.10 for循环和range内建函数

- Python中的for接受可迭代对象作为其参数，每次迭代其中一个元素。
- 为了输出美观，带逗号的print语句输出的元素之间会自动添加一个空格。
- 因为Python中for循环的特别，所以提供了range函数用来做计数循环。

### 1.11列表解析

- 列表解析表示你可以在一行中使用一个for循环将所有值放到一个列表当中

  ```Python
  s = [x**2 for x in range(4)]
  for i in s:
  	print i
      
  s2 = [x**2 for x in range(8) if not x%2]
  for i in s2:
      print i
  ```

### 1.12文件和内建函数open()、file()

- 打开文件

  handle = open(file_name, access_mode = 'r')

  file_name变量包含我们希望打开的文件的字符串的名字，access_mode中'r'表示读取，'w'表示写入，'a'表示添加。其他可能用到的还有'+'表示读写，'b'表示二进制访问。如果未提供access_mode，默认值为'r’。如果open（）成功，一个文件对象句柄会被返回。所有后续文件操作都必须通过此文件句柄进行。一个文件对象返回后，我们就可以访问它的一些方法。

- 什么是句柄

  文件有很多属性，这些属性构成了结构体，每个结构体就是文件句柄。

### 1.13错误和异常

- 编译时会检查语法错误，Python也允许在程序运行时检测错误。当检测到一个错误，Python解释器就引发一个异常，并显示异常的详细信息。
- 要添加错误检测及异常处理，只要将他们封装在try-except语句当中。try之后的代码组，就是打算管理的代码。except之后的代码组，则是处理错误的代码。

### 1.14函数

- Python中的函数使用小括号调用，函数在调用之前必须先定义。如果函数中没有return语句，就会自动返回None对象。

- 如何定义函数

  ```python
  def function([arguments]):
      pass
  ```

- 默认参数

  函数的参数可以有一个默认值，如果提供有默认值，在函数定义中，参数以赋值语句的形式提供。它表示函数调用时如果没有提供这个参数，它就取这个值作为默认值。

### 1.15类

- 面向对象编程的核心，扮演相关数据及逻辑的容器角色。

- 它们提供了创建“真实”对象（即实例）的模板。

- 类的创建

  使用class关键字定义类。可以提供一个可选的父类或者说基类；如果没有合适的基类，那就使用objec作为基类。

  ```python 
  class FoolClass(object):
      def __init__(self):
          pass
  ```

- 当一个类实例被创建时，__init__方法会自动执行，在类实例创建完毕后执行，类似构造函数。与其他语言不同的是，它并不创建实例，它仅仅是你的对象创建后执行的第一个方法。它的目的是执行一些该对象的必要的初始化工作。通过创建自己的构造方法，可以覆盖默认的__init__()方法（默认的方法什么也不做），从而能够修饰刚刚创建的对象。

- self：类实例自身的引用。

### 1.16模块

- 模块是一种组织形式，它将彼此有关系的Python代码组织到一个个独立文件当中。

- 模块可以包含可执行代码，函数和类或者这些东西的组合。

- 模块导入

  import module_name

- 访问模块函数或者访问一个模块变量

  一旦导入完成，一个模块的属性（函数和变量）可以通过 .  句点属性标识法访问。
